BZOJ Ä°ÉÏ¿ª»¨
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int mx = 2e6 + 7;
int bit[mx * 4];
int ans[mx];
int ans2[mx];
int hasha[mx]={0};
struct node {
    int x, y, z, id;
    int cnt,f;
} a[mx], b[mx],d[mx];
int lowbit(int x) {
    return x & (-x);
}
void add(int i, int x) {
    while (i <= mx) {
        bit[i] += x;
        i += lowbit(i);
    }
}
int sum(int i) {
    int s = 0;
    while (i > 0) {
        s += bit[i];
        i -= lowbit(i);
    }
    return s;
}
bool cmpx(node s, node t) {
    if (s.x == t.x) {
        if (s.y == t.y) {
            if (s.z == t.z)
                return s.id < t.id;
            else
                return s.z < t.z;
        } else
            return s.y < t.y;
    } else
        return s.x < t.x;
}
bool cmpy(node s, node t){
    if (s.y == t.y) {
        if (s.z == t.z) {
            if (s.x == t.x)
                return s.id < t.id;
            else
                return s.x < t.x;
        } else
            return s.z < t.z;
    } else
        return s.y < t.y;
}
void cdq(int l, int r) {
    if (l >= r)
        return;
    int mid = (l + r) >> 1;
    int cnt = 0;
    for (int i = l; i <= r; i++) {
        cnt++;
        b[cnt] = d[i];
        if (i <= mid)
            b[cnt].f = -1;
        else
            b[cnt].f = d[i].id;
    }
    sort(b + 1, b + 1 + cnt, cmpy);
    for (int i = 1; i <= cnt; i++) {
        if (b[i].f == -1)
            add(b[i].z, b[i].cnt);
        else
            ans[b[i].id] += sum(b[i].z);
    }
    for (int i = 1; i <= cnt; i++)
        if (b[i].f == -1)
            add(b[i].z, -b[i].cnt);
    cdq(l, mid);
    cdq(mid + 1, r);
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifdef ACM_LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    memset(bit, 0, sizeof(bit));
    int n, s;
    cin >> n;
    cin >> s;
    for (int i = 1; i <= n; i++) {
        cin >> a[i].x >> a[i].y >> a[i].z;
        ans2[i] = ans[i] = 0;
    }
    sort(a + 1, a + 1 + n, cmpx);
    int num = 0;
    for (int i = 1; i <= n; i++) {
        a[i].id = i;
        if (i != 1 && a[i].x == a[i - 1].x && a[i].y == a[i - 1].y && a[i].z == a[i - 1].z)
            d[num].cnt++;
        else {
            d[++num] = a[i];
            d[num].cnt = 1;
        }
    }
    cdq(1, num);
    int res = 0;
    for (int i = 1; i <= num; i++)
        ans[d[i].id] += d[i].cnt - 1;
    for (int i = 1; i <= num; i++) {
        for (int j = 1; j <= d[i].cnt; j++)
            ans2[++res] = ans[d[i].id];
    }
    for (int i = 1; i <= res; i++)
        hasha[ans2[i]]++;//cout << ans[i] << endl;
    for (int i = 0; i <= n - 1; i++)
        cout << hasha[i] << endl;
    return 0;
}
