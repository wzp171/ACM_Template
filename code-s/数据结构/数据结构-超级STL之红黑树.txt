#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/hash_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
using namespace __gnu_pbds;    

typedef __gnu_pbds::priority_queue<int> heap; //默认从大到小
typedef __gnu_pbds::priority_queue<int,greater<int> > heap; //默认从小到大
 
heap q;
heap::point_iterator id;
 
//-----------------------------------------------------
 
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> rbtree;
rbtree q,qq;
 
//-----------------------------------------------------
 
gp_hash_table<int,bool>h;

//优先队列
 
while (!q.empty()) q.pop();
 
for (int i=1;i<=10;i++)q.push(i);
 
auto it=q.push(11);
 
q.modify(it,50);
 
cout<<q.top()<<endl;
 
q.erase(it);
 
cout<<q.top()<<endl;
 
assert ( q. top () == 10);
 
for (int i=10;i<=20;i++)qq.push(i);
q.join(qq);
cout<<q.top();
 
 
//---------------------------------------
//树
 
for (int i=1;i<=20;i+=2) q.insert(i);
// 插入序列 1、3、5、7、9、11、13、15、17、19
 
cout<<q.order_of_key(5)<<endl;
// 小于5的个数
 
auto x=q.find_by_order(6);
rbtree::iterator it=q.find_by_order(6);
// 查找第6大的数，0 为起点
 
cout<<*x<<endl;
cout<<*it<<endl;
// 输出结果为 13
 
q.erase(it);
x=q.find_by_order(6);
cout<<*x<<endl;
q.insert(13);
// 输出结果为 15
 
auto z=q.lower_bound(16);
cout<<*z<<endl;
//大于等于16的第一个数
 
auto zz=q.upper_bound(17);
cout<<*zz<<endl;
//大于16的第一个数
 
for (int i=21;i<=40;i+=2) qq.insert(i);
q.join(qq);
for (auto x:q) cout<<x<<' ';cout<<endl;
// 输出结果为 1、3、5......37、39
//注意合并的两颗树的值域的范围不能相交
 
q.split(29,qq);
for (auto x:q) cout<<x<<' ';cout<<endl;
//小于等于29的元素在q，其余在qq
 
 
//---------------------------------------
//Hash
 
h[1]=1;
cout<<h[1]<<endl;
 
for (auto x:h) cout<<x.second<<endl;
 
 红黑树博客里面也有东西